import json
import sys
from datetime import datetime, timedelta

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
TODO_FILE = "todo.json"

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã YYYY-MM-DD
def parse_date(date_str):
    date_str = date_str.strip().lower()
    if date_str == "today":
        return datetime.now().strftime("%Y-%m-%d")
    elif date_str == "tomorrow":
        return (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d")
    else:
        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞
        try:
            datetime.strptime(date_str, "%Y-%m-%d")
            return date_str
        except ValueError:
            raise ValueError(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: '{date_str}'. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î, 'today' –∏–ª–∏ 'tomorrow'.")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–∞
def load_tasks():
    try:
        with open(TODO_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return []

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ —Ñ–∞–π–ª
def save_tasks(tasks):
    with open(TODO_FILE, 'w', encoding='utf-8') as f:
        json.dump(tasks, f, ensure_ascii=False, indent=4)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
def add_task(description, due_date_str=None):
    tasks = load_tasks()

    due_date = None
    if due_date_str:
        try:
            due_date = parse_date(due_date_str)
        except ValueError as e:
            print(e)
            return

    task = {
        "id": len(tasks) + 1,
        "description": description,
        "due_date": due_date,
        "completed": False,
        "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    tasks.append(task)
    save_tasks(tasks)
    print(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ (ID: {task['id']}): {description} | –°—Ä–æ–∫: {due_date or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–¥–∞—á
def list_tasks():
    tasks = load_tasks()
    if not tasks:
        print("üì≠ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")
        return

    print("\nüìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:")
    print("-" * 80)
    for task in tasks:
        status = "‚úîÔ∏è" if task["completed"] else "‚≠ï"
        due = task["due_date"] or "‚Äî"
        created = task["created_at"]
        print(f"[{status}] ID:{task['id']} | {task['description']}")
        print(f"      –°—Ä–æ–∫: {due} | –°–æ–∑–¥–∞–Ω–∞: {created}")
        print()
    print("-" * 80)

# –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
def complete_task(task_id):
    tasks = load_tasks()
    found = False
    for task in tasks:
        if task["id"] == task_id:
            task["completed"] = True
            found = True
            break
    if found:
        save_tasks(tasks)
        print(f"üéâ –ó–∞–¥–∞—á–∞ ID:{task_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")
    else:
        print(f"‚ùå –ó–∞–¥–∞—á–∞ —Å ID:{task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
def delete_task(task_id):
    tasks = load_tasks()
    tasks_before = len(tasks)
    tasks = [t for t in tasks if t["id"] != task_id]
    if len(tasks) < tasks_before:
        save_tasks(tasks)
        print(f"üóëÔ∏è –ó–∞–¥–∞—á–∞ ID:{task_id} —É–¥–∞–ª–µ–Ω–∞.")
    else:
        print(f"‚ùå –ó–∞–¥–∞—á–∞ —Å ID:{task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–æ –¥–∞—Ç–µ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è)
def filter_tasks_by_date(target_date_str):
    tasks = load_tasks()
    filtered = []
    try:
        target_date = datetime.strptime(target_date_str, "%Y-%m-%d")
    except ValueError:
        return []

    for task in tasks:
        if not task["due_date"] or task["completed"]:
            continue
        try:
            task_date = datetime.strptime(task["due_date"], "%Y-%m-%d")
            if task_date.date() == target_date.date():
                filtered.append(task)
        except ValueError:
            continue
    return filtered

# –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
def show_today():
    today_str = datetime.now().strftime("%Y-%m-%d")
    tasks = filter_tasks_by_date(today_str)
    if not tasks:
        print("üì≠ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return
    print(f"\nüìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today_str}):")
    print("-" * 60)
    for task in tasks:
        print(f"üîπ ID:{task['id']} | {task['description']}")
    print("-" * 60)

# –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
def show_tomorrow():
    tomorrow_str = (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d")
    tasks = filter_tasks_by_date(tomorrow_str)
    if not tasks:
        print("üì≠ –ù–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return
    print(f"\nüìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({tomorrow_str}):")
    print("-" * 60)
    for task in tasks:
        print(f"üîπ ID:{task['id']} | {task['description']}")
    print("-" * 60)

# –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–¥–∞—á –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç
def reschedule_tasks(date_key, minutes):
    try:
        minutes = int(minutes)
    except ValueError:
        print("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á (today/tomorrow/–¥–∞—Ç–∞) –≤ —Å—Ç—Ä–æ–∫—É YYYY-MM-DD
    try:
        target_date = parse_date(date_key)
    except ValueError as e:
        print(e)
        return

    tasks = load_tasks()
    updated_count = 0

    for task in tasks:
        if not task["due_date"] or task["completed"]:
            continue
        if task["due_date"] == target_date:
            try:
                dt = datetime.strptime(task["due_date"], "%Y-%m-%d")
                new_dt = dt + timedelta(minutes=minutes)
                task["due_date"] = new_dt.strftime("%Y-%m-%d")
                updated_count += 1
            except ValueError:
                continue

    if updated_count > 0:
        save_tasks(tasks)
        action = "–≤–ø–µ—Ä—ë–¥" if minutes > 0 else "–Ω–∞–∑–∞–¥"
        print(f"üîÑ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {updated_count} –∑–∞–¥–∞—á(–∏) —Å –¥–∞—Ç—ã {target_date} –Ω–∞ {abs(minutes)} –º–∏–Ω. {action}.")
    else:
        print(f"‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ –¥–∞—Ç—É {target_date} –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞.")

# –ü–æ–º–æ—â—å / —Å–ø—Ä–∞–≤–∫–∞
def show_help():
    help_text = """

üìå To-Do List ‚Äî –ö–æ–º–∞–Ω–¥—ã:

todo.py add "–û–ø–∏—Å–∞–Ω–∏–µ" ["YYYY-MM-DD"|"today"|"tomorrow"]
    –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É. –î–∞—Ç–∞ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞.

todo.py list
    –í—Å–µ –∑–∞–¥–∞—á–∏.

todo.py today
    –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.

todo.py tomorrow
    –ó–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.

todo.py complete <ID>
    –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é.

todo.py delete <ID>
    –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É.

todo.py reschedule <date|today|tomorrow> <–º–∏–Ω—É—Ç—ã>
    –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ –º–∏–Ω—É—Ç –≤–ø–µ—Ä—ë–¥/–Ω–∞–∑–∞–¥.
    –ü—Ä–∏–º–µ—Ä: todo.py reschedule today 60
            todo.py reschedule tomorrow -30

todo.py help
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É.

üìå To-Do List ‚Äî –ö–æ–º–∞–Ω–¥—ã (–ø–æ–ª–Ω—ã–µ –∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è):

add "–û–ø–∏—Å–∞–Ω–∏–µ" ["–¥–∞—Ç–∞"]   | a "..." ["..."]     ‚Äî –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
list                     | l                   ‚Äî –í—Å–µ –∑–∞–¥–∞—á–∏
today                    | td                  ‚Äî –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
tomorrow                 | tm                  ‚Äî –ó–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
complete <ID>            | c <ID>              ‚Äî –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
delete <ID>              | d <ID>              ‚Äî –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
reschedule <–¥–∞—Ç–∞> <–º–∏–Ω>  | r <–¥–∞—Ç–∞> <–º–∏–Ω>      ‚Äî –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ –º–∏–Ω—É—Ç—ã
help                     | h                   ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

üìå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î, 'today', 'tomorrow' (–∏ –∏—Ö —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è)
–ü—Ä–∏–º–µ—Ä: python todo.py a "–ü–æ–∑–≤–æ–Ω–∏—Ç—å" tomorrow
        python todo.py r td 30
    """
    print(help_text)

# –°–ª–æ–≤–∞—Ä—å —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
ALIASES = {
    'a': 'add',
    'l': 'list',
    'td': 'today',
    'tm': 'tomorrow',
    'c': 'complete',
    'd': 'delete',
    'r': 'reschedule',
    'h': 'help'
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
def main():
    if len(sys.argv) < 2:
        show_help()
        return

    command = sys.argv[1].lower()
    # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª–Ω—É—é –∫–æ–º–∞–Ω–¥—É
    full_command = ALIASES.get(command, command)

    if full_command == "add":
        if len(sys.argv) < 3:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.")
            return
        description = sys.argv[2]
        due_date_str = sys.argv[3] if len(sys.argv) > 3 else None
        add_task(description, due_date_str)

    elif full_command == "list":
        list_tasks()

    elif full_command == "today":
        show_today()

    elif full_command == "tomorrow":
        show_tomorrow()

    elif full_command == "complete":
        if len(sys.argv) < 3:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏.")
            return
        try:
            task_id = int(sys.argv[2])
            complete_task(task_id)
        except ValueError:
            print("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

    elif full_command == "delete":
        if len(sys.argv) < 3:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏.")
            return
        try:
            task_id = int(sys.argv[2])
            delete_task(task_id)
        except ValueError:
            print("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

    elif full_command == "reschedule":
        if len(sys.argv) != 4:
            print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: reschedule <–¥–∞—Ç–∞> <–º–∏–Ω—É—Ç—ã>")
            return
        date_key = sys.argv[2]
        minutes = sys.argv[3]
        reschedule_tasks(date_key, minutes)

    elif full_command == "help":
        show_help()

    else:
        print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: todo.py help")

if __name__ == "__main__":
    main()
